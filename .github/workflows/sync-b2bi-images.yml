name: Import IBM Images to ACR

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  import-ibm-images:
    name: Import IBM Images to ACR
    runs-on:
      group: intelligent-search
      labels: [self-hosted, linux, x64]

    environment: non-prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify config file exists
        run: |
          if [ ! -f ".github/ibm-images-config.yaml" ]; then
            echo "::error::Config file .github/ibm-images-config.yaml not found"
            exit 1
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.EW_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.EW_AZURE_SUBSCRIPTION_ID }}

      - name: Login to IBM Container Registry
        env:
          ENTITLED_REGISTRY_USER: ${{ secrets.ENTITLED_REGISTRY_USER }}
          ENTITLED_REGISTRY_KEY: ${{ secrets.ENTITLED_REGISTRY_KEY }}
        run: |
          echo "$ENTITLED_REGISTRY_KEY" | docker login cp.icr.io -u "$ENTITLED_REGISTRY_USER" --password-stdin

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ss151camdmzue2acr

      - name: Pull, Tag, and Push IBM Images to ACR (Python-based)
        run: |
          registry="ss151camdmzue2acr.azurecr.io"
          config_file=".github/ibm-images-config.yaml"

          cat > /tmp/process-images.py <<-EOF
          import yaml
          import subprocess
          import sys
          from datetime import datetime

          def log(message):
              print(f"[{datetime.now().isoformat()}] {message}")

          def run(cmd, max_retries=2):
              log(f"Executing: {' '.join(cmd)}")
              attempts = 0
              while attempts <= max_retries:
                  try:
                      subprocess.run(cmd, check=True)
                      return
                  except subprocess.CalledProcessError as e:
                      attempts += 1
                      if attempts > max_retries:
                          log(f"❌ Failed after {max_retries} retries: {' '.join(cmd)}")
                          sys.exit(1)
                      log(f"⚠️ Attempt {attempts} failed, retrying...")

          try:
              with open("${config_file}", "r") as f:
                  images = yaml.safe_load(f)["images"]

              for img in images:
                  name = img["name"]
                  tag = img["tag"]
                  src = f"cp.icr.io/cp/{name}:{tag}"
                  path, image = name.rsplit("/", 1) if "/" in name else ("", name)
                  dst = f"{registry}/dflink/{path}/{image}:{tag}" if path else f"{registry}/dflink/{image}:{tag}"

                  log(f"🔄 Pulling {src}")
                  run(["docker", "pull", src])

                  log(f"🏷️ Tagging as {dst}")
                  run(["docker", "tag", src, dst])

                  log(f"🚀 Pushing {dst}")
                  run(["docker", "push", dst])

                  log(f"🧹 Removing local images")
                  run(["docker", "rmi", src, dst])

          except Exception as e:
              log(f"❌ Unexpected error: {str(e)}")
              sys.exit(1)
          EOF

          python3 /tmp/process-images.py

      - name: Clean up Docker resources
        if: always()
        run: |
          docker system prune -f

      - name: Clean up runner
        uses: DayforceCoE/re-actions/common/clean-up-self-hosted-runner@v6
        if: always()
